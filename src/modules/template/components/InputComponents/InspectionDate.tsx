import { useTextAnswer } from "src/store/zustand/globalStates/templates/TextAnswer";
import {
  Button,
  Checkbox,
  Chip,
  Divider,
  FormControlLabel,
  Grid,
  Menu,
  MenuItem,
  TextField,
} from "@mui/material";
import React, { FC, MouseEvent, useState } from "react";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import DriveFileRenameOutlineIcon from "@mui/icons-material/DriveFileRenameOutline";
import AddIcon from "@mui/icons-material/Add";
import ModalLayout from "components/ModalLayout";
import { useTemplateFieldsStore } from "containers/template/store/templateFieldsStore";
import InspectionDateIcon from "assets/template/icons/inspectionDate.png";
import { CheckBox } from "@mui/icons-material";
import ComponentWrapper, {
  LabelWrapper,
  BodyWrapper,
} from "containers/template/components/Wrapper";

type InspectionDateProps = {
  responseTypeId?: any;
  dataItem?: any;
};

const InspectionDate = ({ responseTypeId, dataItem }: any) => {
  const updateTemplateDatasets = useTemplateFieldsStore(
    (state: any) => state.updateTemplateDatasets,
  );
  const { selectedDataset } = useTemplateFieldsStore();

  const [open, setOpen] = React.useState<boolean>(false);
  const [isAddLogicClicked, setIsAddLogicClicked] = React.useState<boolean>(false);

  const [openModal, setOpenModal] = React.useState<boolean>(false);

  const [blankChip, setBlankChip] = React.useState<boolean>(true);
  const [blankValue, setBlankValue] = React.useState<string>("Blank");

  const [triggerValue, setTriggerValue] = React.useState<string[]>([]);

  const [isAnswerLogic, setIsAnswerLogic] = React.useState<string>("is");
  const [autoGeneratedNumber, setAutoGeneratedNumber] = React.useState<string>("");

  const [isRequiredDate, setIsRequiredDate] = React.useState<boolean>(
    dataItem?.variables?.date || false,
  );
  const [isRequiredTime, setIsRequiredTime] = React.useState<boolean>(
    dataItem?.variables?.time || false,
  );

  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const [anchorElIsAnswerLogic, setAnchorElIsAnswerLogic] = React.useState<null | HTMLElement>(
    null,
  );
  const [anchorElTrigger, setAnchorElTrigger] = React.useState<null | HTMLElement>(null);

  const { setRightSectionTabValue, selectedInputType, setSelectedInputId } = useTextAnswer();

  const openMenu = Boolean(anchorEl);
  const openMenuIsAnswerLogic = Boolean(anchorElIsAnswerLogic);
  const openMenuTrigger = Boolean(anchorElTrigger);

  const handleMenuClickIsAnswerLogic = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElIsAnswerLogic(event.currentTarget);
  };

  const handleMenuClickTrigger = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElTrigger(event.currentTarget);
  };

  const handleMenuCloseIsAnswerLogic = (e: React.MouseEvent<HTMLElement>) => {
    const target = e.target as HTMLLIElement;
    setAnchorElIsAnswerLogic(null);
    setIsAnswerLogic(target.innerText);
  };

  const handleMenuCloseTrigger = (e: React.MouseEvent<HTMLElement>) => {
    const target = e.target as HTMLLIElement;
    if (triggerValue.includes(target.innerText)) {
      setTriggerValue([...triggerValue]);
    } else {
      setTriggerValue([...triggerValue, target.innerText]);
    }
    setAnchorElTrigger(null);
  };

  const handleMenuCloseAction = () => {
    setAnchorEl(null);
  };

  const onClick = () => {
    setRightSectionTabValue("2");
    setOpen(!open);
    setSelectedInputId(responseTypeId);

    return;
  };

  const triggerActions = ["Require Action", "Require Evidence", "Notify", "Ask Question"];

  return {
    body: (
      <>
        <BodyWrapper>
          <FormControlLabel
            control={
              <Checkbox
                checked={isRequiredDate}
                onChange={(e) => {
                  let checked = e.target.checked;
                  setIsRequiredDate(checked);
                  updateTemplateDatasets(dataItem, "variables", {
                    ...dataItem.variables,
                    date: checked,
                    time: isRequiredTime,
                  });
                }}
                value={isRequiredDate}
              />
            }
            label="Date"
          />
          <FormControlLabel
            control={
              <Checkbox
                checked={isRequiredTime}
                onChange={(e) => {
                  let checked = e.target.checked;
                  setIsRequiredTime(checked);
                  updateTemplateDatasets(dataItem, "variables", {
                    ...dataItem.variables,
                    date: isRequiredDate,
                    time: checked,
                  });
                }}
                value={isRequiredTime}
              />
            }
            label="Time"
          />
        </BodyWrapper>
      </>
    ),
    label: <LabelWrapper img={InspectionDateIcon} title="Inspection Date" />,
  };
};

export default InspectionDate;
