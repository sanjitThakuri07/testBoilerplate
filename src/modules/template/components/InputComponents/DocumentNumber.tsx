import { useTextAnswer } from "src/store/zustand/globalStates/templates/TextAnswer";
import { Button, Chip, Divider, Grid, Menu, MenuItem, TextField } from "@mui/material";
import React, { FC, MouseEvent } from "react";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import DriveFileRenameOutlineIcon from "@mui/icons-material/DriveFileRenameOutline";
import AddIcon from "@mui/icons-material/Add";
import ModalLayout from "src/components/ModalLayout";
import DocumentNumberIcon from "src/assets/template/icons/documentNumber.png";
import ComponentWrapper, {
  LabelWrapper,
  BodyWrapper,
} from "containers/template/components/Wrapper";

type DocumentNumberProps = {
  responseTypeId?: any;
  dataItem?: any;
};

const DocumentNumber = ({ responseTypeId, dataItem }: any) => {
  const [open, setOpen] = React.useState<boolean>(false);
  const [textAnswerFormat, setTextAnswerFormat] = React.useState<string>("BAS0001");
  const [isAddLogicClicked, setIsAddLogicClicked] = React.useState<boolean>(false);

  const [openModal, setOpenModal] = React.useState<boolean>(false);

  const [blankChip, setBlankChip] = React.useState<boolean>(true);
  const [blankValue, setBlankValue] = React.useState<string>("Blank");

  const [triggerValue, setTriggerValue] = React.useState<string[]>([]);

  const [isAnswerLogic, setIsAnswerLogic] = React.useState<string>("is");

  const [autoGeneratedNumber, setAutoGeneratedNumber] = React.useState<string>("");

  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const [anchorElIsAnswerLogic, setAnchorElIsAnswerLogic] = React.useState<null | HTMLElement>(
    null,
  );
  const [anchorElTrigger, setAnchorElTrigger] = React.useState<null | HTMLElement>(null);

  const { setRightSectionTabValue, selectedInputType, setSelectedInputId } = useTextAnswer();

  const openMenu = Boolean(anchorEl);
  const openMenuIsAnswerLogic = Boolean(anchorElIsAnswerLogic);
  const openMenuTrigger = Boolean(anchorElTrigger);

  const handleMenuClickIsAnswerLogic = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElIsAnswerLogic(event.currentTarget);
  };

  const handleMenuClickTrigger = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElTrigger(event.currentTarget);
  };

  const handleMenuClose = (e: MouseEvent<HTMLLIElement>) => {
    const target = e.target as HTMLLIElement;
    setAnchorEl(null);
    setTextAnswerFormat(target.innerText);
  };

  const handleMenuCloseIsAnswerLogic = (e: React.MouseEvent<HTMLElement>) => {
    const target = e.target as HTMLLIElement;
    setAnchorElIsAnswerLogic(null);
    setIsAnswerLogic(target.innerText);
  };

  const handleMenuCloseTrigger = (e: React.MouseEvent<HTMLElement>) => {
    const target = e.target as HTMLLIElement;
    if (triggerValue.includes(target.innerText)) {
      setTriggerValue([...triggerValue]);
    } else {
      setTriggerValue([...triggerValue, target.innerText]);
    }
    setAnchorElTrigger(null);
  };

  const handleMenuCloseAction = () => {
    setAnchorEl(null);
  };

  const onClick = () => {
    setRightSectionTabValue("2");
    setOpen(!open);
    setSelectedInputId(responseTypeId);

    return;
  };

  const generateNumbers = () => {
    const prefix = "BAS";
    const formattedNumber = autoGeneratedNumber.padStart(5, "0");
    const numList = Array.from({ length: 5 }, (_, i) => prefix + formattedNumber + i);
    return numList.join(", ");
  };

  const triggerActions = ["Require Action", "Require Evidence", "Notify", "Ask Question"];

  const textFieldStyle = {
    // backgroundColor: '#f9fafb',
    // borderRadius: '8px',
    // border: '1px solid #e4e6eb',
    // padding: '5px 10px',
    // display: 'flex',
    // alignItems: 'center',
    // cursor: 'pointer',
    // justifyContent: 'space-between',
  };
  return {
    body: (
      <>
        <BodyWrapper>
          <div className="question__answer-type">
            Format -{" "}
            <span
              id="document-number-positioned-button"
              className={"custom__options-2"}
              onClick={() => {
                setOpenModal(true);
              }}
              style={{
                textDecoration: "underline",
                fontWeight: 500,
              }}
            >
              {textAnswerFormat}
            </span>{" "}
            <Menu
              id="format-positioned-menu"
              aria-labelledby="format-positioned-button"
              anchorEl={anchorEl}
              open={openMenu}
              sx={{ marginTop: "23px" }}
              onClose={handleMenuCloseAction}
              anchorOrigin={{
                vertical: "top",
                horizontal: "left",
              }}
              className={"custom__options-2"}
              transformOrigin={{
                vertical: "top",
                horizontal: "left",
              }}
            >
              <MenuItem onClick={handleMenuClose}>Short Answer</MenuItem>
              <MenuItem onClick={handleMenuClose}>Paragraph</MenuItem>
            </Menu>
          </div>
        </BodyWrapper>

        <ModalLayout
          id="MCRModal"
          children={
            <>
              <div className="config_modal_form_css user__department-field">
                <div className="config_modal_heading">
                  <div className="config_modal_title">Document Number Format</div>
                  <div className="config_modal_text">
                    <div>
                      Each inspection generates an individual number. You can customize the format
                      below :
                    </div>
                  </div>
                  <Divider />
                  <div className="document_number_format_part">
                    <div className="document_number_format_heading">Preview</div>
                    <div className="config_modal_text_preview"> {generateNumbers()} </div>
                  </div>

                  <div
                    className="document_number_format"
                    style={{
                      marginTop: "20px",
                    }}
                  >
                    <div className="document_number_format_heading">Document Number Format </div>
                    <TextField
                      variant="standard"
                      autoFocus
                      placeholder="[Number]"
                      value={autoGeneratedNumber}
                      sx={{ backgroundColor: "#f9fafb", width: "100%" }}
                      InputProps={{
                        disableUnderline: true,
                      }}
                      onChange={(e) => setAutoGeneratedNumber(e.target.value)}
                      // onBlur={(event) => setIsQuestionFocused(false)}
                    />
                  </div>

                  <div className="document_number_format_footer">
                    Customize the document number format by inserting text. For example, "Safety
                    R[number]" generates "BAS000001, BAS000002, ...".
                  </div>
                </div>
              </div>
            </>
          }
          openModal={openModal}
          setOpenModal={setOpenModal}
        />
      </>
    ),
    label: <LabelWrapper img={DocumentNumberIcon} title="Document Number" />,
  };
};

export default DocumentNumber;
